{
	"info": {
		"_postman_id": "f4e500b8-4e4a-43b7-954b-bce57b42df26",
		"name": "FakeRESTAPIWebV1Books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37066334"
	},
	"item": [
		{
			"name": "Get books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"console.log(jsonData);",
							"",
							"// validate json response ",
							"pm.test(\"Checking json data response\", () => {",
							"    // pm.expect(jsonData[50].title).to.eql(\"Book 51\");",
							"    let actualData = jsonData[50].title;",
							"    let expectedData = \"Book 51\";",
							"    console.log(\"Actual data: \", actualData, \" | Expected data: \", expectedData);",
							"    ",
							"    pm.expect(actualData).to.eql(expectedData);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/v1/Books",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// random id between 0 and 999",
							"var randomId = Math.floor(Math.random() * 1000); ",
							"console.log(randomId);",
							"pm.collectionVariables.set(\"id\", randomId);",
							"",
							"// random alphanumeric string",
							"var randomTitle = Math.random().toString(36).substring(7); ",
							"console.log(randomTitle);",
							"pm.collectionVariables.set(\"title\", randomTitle);",
							"",
							"// random alphanumeric string",
							"var randomDescription = Math.random().toString(36).substring(7); ",
							"console.log(randomDescription);",
							"pm.collectionVariables.set(\"description\", randomDescription);",
							"",
							"// random page count between 1 and 500",
							"var randomPageCount = Math.floor(Math.random() * 500) + 1; ",
							"console.log(randomPageCount);",
							"pm.collectionVariables.set(\"pageCount\", randomPageCount);",
							"",
							"// random alphanumeric string",
							"var randomExcerpt = Math.random().toString(36).substring(7); ",
							"console.log(randomExcerpt);",
							"pm.collectionVariables.set(\"excerpt\", randomExcerpt);",
							"",
							"var randomPublishDate = new Date().toISOString();",
							"console.log(randomPublishDate);",
							"pm.collectionVariables.set(\"publishDate\", randomPublishDate);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"console.log(\"JSON data: \", jsonData);",
							"",
							"pm.test(\"Checking response body for validation - id matched\", () => {",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"id\"));",
							"    console.log(\"Actual id: \", jsonData.id, \" | Expected id: \", pm.collectionVariables.get(\"id\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - title matched\", () => {",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));",
							"    console.log(\"Actual title: \", jsonData.title, \" | Expected title: \", pm.collectionVariables.get(\"title\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - description matched\", () => {",
							"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get(\"description\"));",
							"    console.log(\"Actual description: \", jsonData.description, \" | Expected description: \", pm.collectionVariables.get(\"description\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - pageCount matched\", () => {",
							"    pm.expect(jsonData.pageCount).to.eql(pm.collectionVariables.get(\"pageCount\"));",
							"    console.log(\"Actual pageCount: \", jsonData.pageCount, \" | Expected pageCount: \", pm.collectionVariables.get(\"pageCount\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - excerpt matched\", () => {",
							"    pm.expect(jsonData.excerpt).to.eql(pm.collectionVariables.get(\"excerpt\"));",
							"    console.log(\"Actual excerpt: \", jsonData.excerpt, \" | Expected excerpt: \", pm.collectionVariables.get(\"excerpt\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - publishDate matched\", () => {",
							"    pm.expect(jsonData.publishDate).to.eql(pm.collectionVariables.get(\"publishDate\"));",
							"    console.log(\"Actual publishDate: \", jsonData.publishDate, \" | Expected publishDate: \", pm.collectionVariables.get(\"publishDate\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{id}}\",\n  \"title\": \"{{title}}\",\n  \"description\": \"{{description}}\",\n  \"pageCount\": {{pageCount}},\n  \"excerpt\": \"{{excerpt}}\",\n  \"publishDate\": \"{{publishDate}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/v1/Books",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get book by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(\"Current id: \", pm.collectionVariables.get(\"id\"));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Current id: \", pm.collectionVariables.get(\"id\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}api/v1/Books/{{id}}",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"v1",
						"Books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit book by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"console.log(\"JSON data: \", jsonData)",
							"",
							"pm.test(\"Checking response body for validation - title change matched\", () => {",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));",
							"    console.log(\"Actual title: \", jsonData.title, \" | Expected title: \", pm.collectionVariables.get(\"title\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - description change matched\", () => {",
							"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get(\"description\"));",
							"    console.log(\"Actual description: \", jsonData.description, \" | Expected description: \", pm.collectionVariables.get(\"description\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - pageCount change matched\", () => {",
							"    pm.expect(jsonData.pageCount).to.eql(pm.collectionVariables.get(\"pageCount\"));",
							"    console.log(\"Actual pageCount: \", jsonData.pageCount, \" | Expected pageCount: \", pm.collectionVariables.get(\"pageCount\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - excerpt change matched\", () => {",
							"    pm.expect(jsonData.excerpt).to.eql(pm.collectionVariables.get(\"excerpt\"));",
							"    console.log(\"Actual excerpt: \", jsonData.excerpt, \" | Expected excerpt: \", pm.collectionVariables.get(\"excerpt\"));",
							"});",
							"",
							"pm.test(\"Checking response body for validation - publishDate change matched\", () => {",
							"    pm.expect(jsonData.publishDate).to.eql(pm.collectionVariables.get(\"publishDate\"));",
							"    console.log(\"Actual publishDate: \", jsonData.publishDate, \" | Expected publishDate: \", pm.collectionVariables.get(\"publishDate\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"id: \", pm.collectionVariables.get(\"id\"));",
							"",
							"// random alphanumeric string",
							"var randomTitle = Math.random().toString(36).substring(7); ",
							"console.log(randomTitle);",
							"pm.collectionVariables.set(\"title\", randomTitle);",
							"",
							"// random alphanumeric string",
							"var randomDescription = Math.random().toString(36).substring(7); ",
							"console.log(randomDescription);",
							"pm.collectionVariables.set(\"description\", randomDescription);",
							"",
							"// random page count between 1 and 500",
							"var randomPageCount = Math.floor(Math.random() * 500) + 1; ",
							"console.log(randomPageCount);",
							"pm.collectionVariables.set(\"pageCount\", randomPageCount);",
							"",
							"// random alphanumeric string",
							"var randomExcerpt = Math.random().toString(36).substring(7); ",
							"console.log(randomExcerpt);",
							"pm.collectionVariables.set(\"excerpt\", randomExcerpt);",
							"",
							"var randomPublishDate = new Date().toISOString();",
							"console.log(randomPublishDate);",
							"pm.collectionVariables.set(\"publishDate\", randomPublishDate);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{id}}\",\n  \"title\": \"{{title}}\",\n  \"description\": \"{{description}}\",\n  \"pageCount\": {{pageCount}},\n  \"excerpt\": \"{{excerpt}}\",\n  \"publishDate\": \"{{publishDate}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/v1/Books/{{id}}",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"v1",
						"Books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove book by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.collectionVariables.unset(\"id\");",
							"pm.collectionVariables.unset(\"title\");",
							"pm.collectionVariables.unset(\"description\");",
							"pm.collectionVariables.unset(\"pageCount\");",
							"pm.collectionVariables.unset(\"excerpt\");",
							"pm.collectionVariables.unset(\"publishDate\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/v1/Books/{{id}}",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"v1",
						"Books",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://fakerestapi.azurewebsites.net/",
			"type": "string"
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "pageCount",
			"value": ""
		},
		{
			"key": "excerpt",
			"value": ""
		},
		{
			"key": "publishDate",
			"value": ""
		}
	]
}